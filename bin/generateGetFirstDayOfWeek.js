import fs from 'fs-extra'
import path from 'path'

import getTerritoryFromLocale from '../source/utility/getTerritoryFromLocale'

// https://unpkg.com/browse/cldr-core@40.0.0/supplemental/weekData.json
const weekData = require('cldr-core/supplemental/weekData.json')

// // https://unpkg.com/browse/cldr-core@40.0.0/supplemental/languageData.json
// const languageData = require('node_modules/cldr-core/supplemental/languageData.json')

// https://unpkg.com/browse/cldr-core@40.0.0/supplemental/likelySubtags.json
const likelySubtags = require('cldr-core/supplemental/likelySubtags.json')

const firstDayByTerritory = weekData.supplemental.weekData.firstDay;

// Some weird "alternative" `GB` territory.
delete firstDayByTerritory['GB-alt-variant']

// "001" means "default".
delete firstDayByTerritory['001']

for (const territory of Object.keys(firstDayByTerritory)) {
	firstDayByTerritory[territory] = getWeekdayIndex(firstDayByTerritory[territory])
}

const territoryByLanguage = {}

const likelySubtagsForLanguage = likelySubtags.supplemental.likelySubtags

for (const language of Object.keys(likelySubtagsForLanguage)) {
	const locale = likelySubtagsForLanguage[language]
	const territory = getTerritoryFromLocale(locale)
	if (territory) {
		// `territoryByLanguage` data turned out to be too large.
		// Skip all non-two-letter languages.
		if (language.length === 2) {
			territoryByLanguage[language] = territory
		}
	}
}

const territoriesByFirstDayOfWeek = []
const languagesByFirstDayOfWeek = []
let i = 0
while (i <= 6) {
	territoriesByFirstDayOfWeek[i] = Object.keys(firstDayByTerritory).filter(
		territory => firstDayByTerritory[territory] === i
	)
	languagesByFirstDayOfWeek[i] = Object.keys(territoryByLanguage).filter(
		language => firstDayByTerritory[territoryByLanguage[language]] === i
	)
	i++
}

const content = `
// This file was autogenerated by "./bin/generateGetFirstDayOfWeek.js" script.

import getTerritoryFromLocale from './getTerritoryFromLocale'
import getLanguageFromLocale from './getLanguageFromLocale'

const territoriesByFirstDayOfWeek = ${JSON.stringify(territoriesByFirstDayOfWeek, null, 2)}
const languagesByFirstDayOfWeek = ${JSON.stringify(languagesByFirstDayOfWeek, null, 2)}

// Returns the "first day of week".
// 0 means "Sunday", 1 means "Monday", etc.
// Is 0 by default, as defined in the "US" country.
//
// https://date-fns.org/v2.28.0/docs/startOfWeek
// https://github.com/tc39/ecma402/issues/6
// https://stackoverflow.com/questions/34469869/how-do-i-find-out-which-is-the-first-day-of-the-week-in-the-current-locale?noredirect=1&lq=1
// https://github.com/unicode-org/cldr/blob/7a2fada9220bfddef3936bdffaff173041aef8da/common/supplemental/supplementalData.xml#L4696
//
// https://en.wikipedia.org/wiki/Week
//
// "While, for example, the United States, Canada, Brazil, Japan and other countries
//  consider Sunday as the first day of the week, and while the week begins with Saturday
//  in much of the Middle East, the international ISO 8601 standard[a] and most of Europe
//  has Monday as the first day of the week.[2] The Geneva-based ISO standards organization
//  uses Monday as the first day of the week in its ISO week date system."
//
export default function getFirstDayOfWeek(locale) {
	const territory = getTerritoryFromLocale(locale)
	if (territory) {
		let i = 0
		while (i < territoriesByFirstDayOfWeek.length) {
			if (territoriesByFirstDayOfWeek[i].indexOf(territory) >= 0) {
				return i
			}
			i++
		}
	}
	const language = getLanguageFromLocale(locale)
	let i = 0
	while (i < languagesByFirstDayOfWeek.length) {
		if (languagesByFirstDayOfWeek[i].indexOf(language) >= 0) {
			return i
		}
		i++
	}
}
`.trim()

fs.writeFileSync('./source/utility/getFirstDayOfWeek.js', content)

// const languageDataByKey = weekData.supplemental.languageData
//
// for (const key of Object.keys(languageDataByKey)) {
// 	const language = key.split('-')[0]
// 	const data = languageDataByKey[key]
// 	if (data._territories) {
// 		const territory = data._territories[0]
// 	}
// }


// const LOCALES_DIRECTORY = 'node_modules/date-fns/locales'
// const filenames = fs.readdirSync(LOCALES_DIRECTORY)
//
// for (const filename of filenames) {
// 	const stats = fs.statSync(path.join(LOCALES_DIRECTORY, filename))
// 	if (stats.isDirectory()) {
// 		const localeData = require(path.join(LOCALES_DIRECTORY, filename, 'index.js'))
// 		firstDayOfWeekForLocales[locale] = localeData.options.weekStartsOn
// 	}
// }

function getWeekdayIndex(weekdayName) {
	switch (weekdayName) {
		case 'sun':
			return 0
		case 'mon':
			return 1
		case 'tue':
			return 2
		case 'wed':
			return 3
		case 'thu':
			return 4
		case 'fri':
			return 5
		case 'sat':
			return 6
		default:
			throw new Error(`Unsupported weekday name: ${weekdayName}`)
	}
}